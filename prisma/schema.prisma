// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql" 
    url      = env("DATABASE_URL")
}

model Project {
    id              String    @id @default(uuid())
    key             String    @unique
    name            String
    defaultAssignee String?
    imageUrl        String?
    createdAt       DateTime  @default(now())
    updatedAt       DateTime? @updatedAt
    deletedAt       DateTime?

    members Member[]
}

model Member {
    id        String  @id
    projectId String
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@index([projectId])
}

model Issue {
    id             String    @id @default(uuid())
    key            String
    name           String
    description    String?   @db.Text
    details        String?
    status         String    @default("TODO")
    type           String    @default("TASK")
    sprintPosition Float
    boardPosition  Float     @default(-1)
    reporterId     String    @default("1")
    assigneeId     String?
    parentId       String?
    imageUrl       String?
    sprintId       String?
    isDeleted      Boolean   @default(false)
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    deletedAt      DateTime?
    sprintColor    String?
    creatorId      String

    comments Comment[]
    Sprint   Sprint?   @relation(fields: [sprintId], references: [id])

    @@index([sprintId])
}

model Sprint {
    id          String    @id @default(uuid())
    name        String
    description String    @db.Text
    duration    String?
    startDate   DateTime?
    endDate     DateTime?
    creatorId   String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime? @updatedAt
    deletedAt   DateTime?
    status      String    @default("PENDING")

    issues Issue[]
}

model Comment {
    id        String    @id @default(uuid())
    content   String    @db.Text
    authorId  String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    isEdited  Boolean   @default(false)
    issueId   String
    logId     String?

    Issue Issue? @relation(fields: [issueId], references: [id])

    @@index([issueId])
}

model DefaultUser {
    id     String  @id
    name   String
    email  String  @unique
    avatar String?
}
